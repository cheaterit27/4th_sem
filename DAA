#include <stdio.h>
#include <stdbool.h>

#define MAX 100

bool isSafe(int vertex, int graph[MAX][MAX], int color[], int c, int V) {
    for (int i = 0; i < V; i++) {
        if (graph[vertex][i] && color[i] == c)
            return false;
    }
    return true;
}

bool graphColoringUtil(int graph[MAX][MAX], int m, int color[], int v, int V) {
    if (v == V)
        return true;

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c, V)) {
            color[v] = c;
            if (graphColoringUtil(graph, m, color, v + 1, V))
                return true;
            color[v] = 0;
        }
    }
    return false;
}

int findChromaticNumber(int graph[MAX][MAX], int V, int color[]) {
    for (int m = 1; m <= V; m++) {
        for (int i = 0; i < V; i++) color[i] = 0;
        if (graphColoringUtil(graph, m, color, 0, V))
            return m;
    }
    return V; 
}

void printSolution(int color[], int V, int chromaticNumber) {
    printf("Minimum number of colors required: %d\n", chromaticNumber);
    for (int i = 0; i < V; i++)
        printf("Vertex %d ---> Color %d\n", i, color[i]);
}

int main() {
    int V;
    printf("Enter number of vertices: ");
    scanf("%d", &V);

    int graph[MAX][MAX];
    printf("Enter the adjacency matrix (%d x %d):\n", V, V);
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &graph[i][j]);

    int color[MAX] = {0};
    int chromaticNumber = findChromaticNumber(graph, V, color);

    printSolution(color, V, chromaticNumber);

    return 0;
}