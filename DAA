#include <stdio.h>
#include <stdbool.h>

#define MAX 100

bool isSafe(int vertex, int graph[MAX][MAX], int color[], int c, int V) {
    for (int i = 0; i < V; i++) {
        if (graph[vertex][i] && color[i] == c)
            return false;
    }
    return true;
}

bool graphColoringUtil(int graph[MAX][MAX], int m, int color[], int v, int V) {
    if (v == V)
        return true;

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c, V)) {
            color[v] = c;
            if (graphColoringUtil(graph, m, color, v + 1, V))
                return true;
            color[v] = 0;
        }
    }
    return false;
}

int findChromaticNumber(int graph[MAX][MAX], int V, int color[]) {
    for (int m = 1; m <= V; m++) {
        for (int i = 0; i < V; i++) color[i] = 0;
        if (graphColoringUtil(graph, m, color, 0, V))
            return m;
    }
    return V; 
}

void printSolution(int color[], int V, int chromaticNumber) {
    printf("Minimum number of colors required: %d\n", chromaticNumber);
    for (int i = 0; i < V; i++)
        printf("Vertex %d ---> Color %d\n", i, color[i]);
}

int main() {
    int V;
    printf("Enter number of vertices: ");
    scanf("%d", &V);

    int graph[MAX][MAX];
    printf("Enter the adjacency matrix (%d x %d):\n", V, V);
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &graph[i][j]);

    int color[MAX] = {0};
    int chromaticNumber = findChromaticNumber(graph, V, color);

    printSolution(color, V, chromaticNumber);

    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 4
#define N 16

typedef struct Node {
    int puzzle[SIZE][SIZE];
    int x, y;
    int cost;
    int level;
    struct Node* parent;
} Node;

int goal[SIZE][SIZE] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9,10,11,12},
    {13,14,15, 0}
};

int row[] = {1, 0, -1, 0};
int col[] = {0, -1, 0, 1};

int calculateCost(int puzzle[SIZE][SIZE]) {
    int count = 0;
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (puzzle[i][j] && puzzle[i][j] != goal[i][j])
                count++;
    return count;
}

void printPuzzle(int puzzle[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (puzzle[i][j])
                printf("%2d ", puzzle[i][j]);
            else
                printf(" _ ");
        }
        printf("\n");
    }
    printf("\n");
}

Node* createNode(int puzzle[SIZE][SIZE], int x, int y, int newX, int newY, int level, Node* parent) {
    Node* node = (Node*)malloc(sizeof(Node));
    memcpy(node->puzzle, puzzle, sizeof(node->puzzle));
    int temp = node->puzzle[x][y];
    node->puzzle[x][y] = node->puzzle[newX][newY];
    node->puzzle[newX][newY] = temp;

    node->cost = calculateCost(node->puzzle);
    node->level = level;
    node->parent = parent;
    node->x = newX;
    node->y = newY;
    return node;
}

int isValid(int x, int y) {
    return (x >= 0 && x < SIZE && y >= 0 && y < SIZE);
}

int isGoal(int puzzle[SIZE][SIZE]) {
    return calculateCost(puzzle) == 0;
}

void printPath(Node* root) {
    if (root == NULL) return;
    printPath(root->parent);
    printPuzzle(root->puzzle);
}

int minHeapIndex(Node* heap[], int n) {
    int min = 0;
    for (int i = 1; i < n; i++) {
        int f1 = heap[i]->cost + heap[i]->level;
        int f2 = heap[min]->cost + heap[min]->level;
        if (f1 < f2) min = i;
    }
    return min;
}

void solve(int initial[SIZE][SIZE], int x, int y) {
    Node* heap[1000];
    int heapSize = 0;

    Node* root = createNode(initial, x, y, x, y, 0, NULL);
    heap[heapSize++] = root;

    while (heapSize > 0) {
        int minIndex = minHeapIndex(heap, heapSize);
        Node* min = heap[minIndex];

        heap[minIndex] = heap[--heapSize];

        if (isGoal(min->puzzle)) {
            printf("Steps to reach goal:\n\n");
            printPath(min);
            return;
        }

        for (int i = 0; i < 4; i++) {
            int newX = min->x + row[i];
            int newY = min->y + col[i];

            if (isValid(newX, newY)) {
                Node* child = createNode(min->puzzle, min->x, min->y, newX, newY, min->level + 1, min);
                heap[heapSize++] = child;
            }
        }
    }

    printf("No solution found.\n");
}

int main() {
    int initial[SIZE][SIZE] = {
        {1, 2, 3, 4},
        {5, 6, 0, 8},
        {9,10, 7,11},
        {13,14,15,12}
    };

    int x, y;
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (initial[i][j] == 0) {
                x = i;
                y = j;
            }

    printf("Initial State:\n");
    printPuzzle(initial);

    solve(initial, x, y);

    return 0;
}
