#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>

using namespace std;

const int NUM_ITEMS = 10000;
const int NUM_WORKERS = 10;
const int MAX_MACHINES = 10;

class TimeGenerator {
public:
    static double getAssemblyTime() {
        return 100.0 + (rand() / (double)RAND_MAX) * 200.0;
    }

    static double getPolishingTime() {
        double u1, u2, z;
        do {
            u1 = rand() / (double)RAND_MAX;
            u2 = rand() / (double)RAND_MAX;
            z = sqrt(-2.0 * log(u1)) * cos(2 * M_PI * u2);
            z = 20.0 + 7.0 * z;
        } while (z < 5.0);
        return z;
    }
};

class PolishingSystem {
private:
    int numMachines;
    double workerTime[NUM_WORKERS];
    double machineReady[MAX_MACHINES];

    int findNextAvailableMachine() {
        int idx = 0;
        for (int i = 1; i < numMachines; ++i) {
            if (machineReady[i] < machineReady[idx]) {
                idx = i;
            }
        }
        return idx;
    }

public:
    PolishingSystem(int machines) {
        numMachines = machines;
        for (int i = 0; i < NUM_WORKERS; ++i) {
            workerTime[i] = 0.0;
        }
        for (int i = 0; i < MAX_MACHINES; ++i) {
            machineReady[i] = 0.0;
        }
    }

    double simulate() {
        double totalWaitTime = 0.0;

        for (int i = 0; i < NUM_ITEMS; ++i) {
            int workerId = i % NUM_WORKERS;

            double assemblyTime = TimeGenerator::getAssemblyTime();
            double assemblyDone = workerTime[workerId] + assemblyTime;

            int machineId = findNextAvailableMachine();
            double waitTime = (machineReady[machineId] > assemblyDone)
                              ? (machineReady[machineId] - assemblyDone)
                              : 0.0;
            double polishingStart = assemblyDone + waitTime;
            double polishingTime = TimeGenerator::getPolishingTime();
            double polishingDone = polishingStart + polishingTime;

            machineReady[machineId] = polishingDone;
            workerTime[workerId] = polishingDone;

            totalWaitTime += waitTime;
        }

        return totalWaitTime / NUM_ITEMS;
    }
};

int main() {
    srand(time(0));

    for (int machines = 1; machines <= 3; ++machines) {
        PolishingSystem system(machines);
        cout << "Average wait time with " << machines << " polishing machine(s): "
             << system.simulate() << " seconds" << endl;
    }

    return 0;
}
