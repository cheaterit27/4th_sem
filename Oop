#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

int graph[MAX_VERTICES][MAX_VERTICES];

bool isSafe(int vertex, int color[], int c, int totalVertices) {
    for (int i = 1; i <= totalVertices; i++) {
        if (graph[vertex][i] && color[i] == c)
            return false;
    }
    return true;
}

void mColoring(int m, int vertex, int totalVertices, int color[], int *solutionCount) {
    if (vertex > totalVertices) {
        printf("Solution %d:\n", (*solutionCount));
        (*solutionCount)++;
        for (int i = 1; i <= totalVertices; i++) {
            printf("Node %d -> color %d\n", i, color[i]);
        }
        printf("\n");
        return;
    }

    for (int c = 1; c <= m; c++) {
        if (isSafe(vertex, color, c, totalVertices)) {
            color[vertex] = c;
            mColoring(m, vertex + 1, totalVertices, color, solutionCount);
            color[vertex] = -1;
        }
    }
}

int main() {
    int vertices;
    printf("Enter number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter adjacency matrix (%d x %d):\n", vertices, vertices);
    for (int i = 1; i <= vertices; i++) {
        for (int j = 1; j <= vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int m;
    printf("Enter number of colors: ");
    scanf("%d", &m);

    int color[vertices + 1];
    for (int i = 1; i <= vertices; i++)
        color[i] = -1;

    int solutionCount = 1;
    mColoring(m, 1, vertices, color, &solutionCount);

    if (solutionCount == 1)
        printf("No solution found\n");

    return 0;
}
